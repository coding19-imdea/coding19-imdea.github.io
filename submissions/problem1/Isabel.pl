:- module(_,_,[]).

:- use_module(library(lists)).
:- use_module(engine(messages_basic)).
:- use_module(library(streams)).
:- use_module(library(aggregates)).

base_triangle(
[['_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','1','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','1','1','1','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','1','1','1','1','1','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_','_'],
['_','_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_','_'],
['_','_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_','_'],
['_','_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_','_'],
['_','_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_','_'],
['_','_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_','_'],
['_','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','_'],
['1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1']]).

sierpinksi(1, T) :- !,
    base_triangle(T).
sierpinksi(N, TN) :-
    N1 is N - 1,
    sierpinksi(N1, TPrev),
    findall((R,C), next_top_triangle(TPrev,R,C), Tops),
    make_holes_triangles(Tops, TPrev, TN).

next_top_triangle(T, R, C) :-
    next_top_triangle_(T, 0, R, C).

next_top_triangle_([T|_Ts], R, R, C) :-
    next_top_triangle_row(T,0,C).
next_top_triangle_([_|Ts], N, R, C) :-
    N1 is N + 1,
    next_top_triangle_(Ts, N1, R, C).

next_top_triangle_row(['_','1','_'|_Ts],N, N1) :- N1 is N + 1.
next_top_triangle_row([_|Ts],N0,N) :-
    N1 is N0 + 1,
    next_top_triangle_row(Ts,N1,N).

make_holes_triangles([], T, T).
make_holes_triangles([(Row, Col)|Tops], T, NT) :-
    length(A, Row),
    append(A, NextRows, T), !, % remove unnecessary rows
    Col1 is Col + 1,
    end_next_triangle(NextRows, Col1, SubT1, SubT2),
    length(SubT1, Height),
    Width is Height * 2 - 1,
    N is Col - Width // 2,
    advance_triangle(SubT1, N, PreR, SubT),
    modify(SubT, 1, Height, Width, SubT0),
    append_pre(PreR, SubT0, RowsT0),
    append(A, RowsT0, A1), !,
    append(A1, SubT2, NT0), !,
    make_holes_triangles(Tops, NT0, NT).

append_pre([], [], []).
append_pre([X|Xs], [Y|Ys], [A|As]) :-
    append(X,Y,A),
    append_pre(Xs, Ys, As).

advance_triangle(T, N, PreR, SubT) :-
    advance_all_rows(T, N, PreR, SubT).

advance_all_rows([], _, [], []).
advance_all_rows([R|Rs], N, [A|PreRs], [NR|NRs]) :-
    length(A, N),
    append(A, NR, R), !,
    advance_all_rows(Rs, N, PreRs, NRs).

end_next_triangle([], _, [], []).
end_next_triangle([T|Ts],TopN, [], [T|Ts]) :-
    nth(TopN, T, '_'), !.
end_next_triangle([T|Ts],TopN, [T|NTs], RestT) :-
    end_next_triangle(Ts,TopN, NTs, RestT).

% modify(Triangle, CurrRow, TotalC, TotalRow, NewTriangle).
modify([], _, _, _, []).
modify([R|Rs], CR, TR, TC, [R|NRs]) :-
    CR < (TR / 2), !, 
    CR1 is CR + 1,
    modify(Rs, CR1, TR, TC, NRs).
modify([R|Rs], CR, TR, TC, [NR|NRs]) :-
    modify_row(R, CR, TR, 1, TC, NR),
    CR1 is CR + 1,
    modify(Rs, CR1, TR, TC, NRs).

% modify_row(OldRow, CurrRow, TotalRow, CurrCol, TotalCol, NewRow).
modify_row([], _, _, _, _, []).
modify_row([T|Ts], CR, TR, CC, TC, [NT|NTs]) :-
    ( (T = '1', change_value(CR, TR, CC, TC)) ->
        NT = '_'
    ;
        NT = T
    ),
    CC1 is CC + 1,
    modify_row(Ts, CR, TR, CC1, TC, NTs).

:- use_package(datafacts).
:- data change_value_/4.
change_value(CR, TR, CC, TC) :-
    change_value_(CR, TR, CC, TC), !.
change_value(CR, TR, _CC, _TC) :-
    CR < floor(TR // 2) + 1, !, fail.
change_value(CR, TR, CC, TC) :-
    CR =:= floor(TR // 2) + 1, !,
    Init is (TC + 1) // 4,
    CC > Init,
    Max is Init * 3,
    CC < Max, !.
change_value(CR, TR, CC, TC) :-
    CR1 is CR - 1,
    change_value(CR1, TR, CC, TC),
    CC1 is CC - 1,
    change_value(CR1, TR, CC1, TC),
    CC2 is CC+1,
    change_value(CR1, TR, CC2, TC),
    assertz_fact(change_value_(CR, TR, CC, TC)).

print_triangle([]) :- nl.
print_triangle([T|Ts]) :-
    display_list(T), nl,
    print_triangle(Ts).
